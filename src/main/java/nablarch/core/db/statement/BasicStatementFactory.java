package nablarch.core.db.statement;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import nablarch.core.cache.StaticDataCache;
import nablarch.core.cache.StaticDataLoader;
import nablarch.core.db.DbExecutionContext;
import nablarch.core.log.Logger;
import nablarch.core.repository.IgnoreProperty;


/**
 * {@link nablarch.core.db.statement.StatementFactory}の基本実装クラス。<br>
 * 本クラスでは、下記の{@link SqlStatement}実装クラスを生成する。<br>
 * <ul>
 * <li>{@link nablarch.core.db.statement.BasicSqlPStatement}</li>
 * <li>nablarch.core.db.statement.BasicSqlCStatement</li>
 * </ul>
 *
 * @author Hisaaki Sioiri
 */
public class BasicStatementFactory implements StatementFactory {

    /** SqlStatementExceptionFactory */
    private SqlStatementExceptionFactory sqlStatementExceptionFactory;

    /** デフォルトフェッチサイズ */
    private int fetchSize = 10;

    /** デフォルトのクエリータイムアウト時間（単位：秒） */
    private int queryTimeout;

    /** オブジェクトのフィールドへの値自動設定用ハンドラー */
    private List<AutoPropertyHandler> updatePreHookObjectHandlerList;

    /** 名前付きバインド変数解析クラス */
    private SqlParameterParserFactory sqlParameterParserFactory;

    /** like条件のエスケープ対象文字リスト */
    private char[] likeEscapeTargetCharList = {'%', '_'};

    /** like条件のエスケープ文字 */
    private char likeEscapeChar = '\\';

    /** ロードしたSQL文のキャッシュ */
    private final CachingSqlLoader cachingSqlLoader = new CachingSqlLoader();

    /** {@inheritDoc} */
    @Override
    public SqlPStatement getSqlPStatement(final String sql, final Connection con, DbExecutionContext context) throws SQLException {
        return createSqlPStatement(sql, con.prepareStatement(sql), context);
    }


    /** {@inheritDoc} */
    @Override
    public SqlPStatement getSqlPStatement(final String sql, final Connection con, DbExecutionContext context, SelectOption option) throws SQLException {
        return createSqlPStatement(sql, con.prepareStatement(sql), context, option);
    }

    /** {@inheritDoc} */
    @Override
    public SqlPStatement getSqlPStatement(String sql, Connection con, int autoGeneratedKeys, DbExecutionContext context) throws
            SQLException {
        return createSqlPStatement(sql, con.prepareStatement(sql, autoGeneratedKeys), context);
    }

    /** {@inheritDoc} */
    @Override
    public SqlPStatement getSqlPStatement(String sql, Connection con, int[] columnIndexes, DbExecutionContext context) throws
            SQLException {
        return createSqlPStatement(sql, con.prepareStatement(sql, columnIndexes), context);
    }

    @Override
    public SqlPStatement getSqlPStatement(String sql, Connection con, String[] columnNames, DbExecutionContext context) throws SQLException {
        return createSqlPStatement(sql, con.prepareStatement(sql, columnNames), context);
    }

    /**
     * {@link nablarch.core.db.statement.BasicSqlPStatement}を生成する。
     * @param sql SQL文
     * @param statement ステートメント
     * @param context DBアクセス時の実行時のコンテキスト
     * @return 生成したインスタンス
     * @throws SQLException SQL例外
     */
    private SqlPStatement createSqlPStatement(String sql, PreparedStatement statement, DbExecutionContext context) throws
            SQLException {
        return createSqlPStatement(sql, statement, context, null);
    }

    /**
     * {@link nablarch.core.db.statement.BasicSqlPStatement}を生成する。
     * @param sql SQL文
     * @param statement ステートメント
     * @param context DBアクセス時の実行時のコンテキスト
     * @param selectOption 検索処理オプション
     * @return 生成したインスタンス
     * @throws SQLException SQL例外
     */
    private SqlPStatement createSqlPStatement(String sql, PreparedStatement statement, DbExecutionContext context, SelectOption selectOption) throws
            SQLException {
        BasicSqlPStatement sqlp = new BasicSqlPStatement(sql, statement);
        setCommonPropsTo(sqlp, context);
        sqlp.setSelectOption(selectOption);
        return sqlp;
    }

    /**
     * 指定された{@link BasicSqlPStatement}に対して、
     * 実行に必要となる共通のプロパティを設定する。
     *
     * @param sqlp 設定対象となるインスタンス。
     * @param context DBアクセス時の実行時のコンテキスト
     */
    protected final void setCommonPropsTo(BasicSqlPStatement sqlp, DbExecutionContext context) {
        sqlp.setSqlStatementExceptionFactory(sqlStatementExceptionFactory);
        sqlp.setFetchSize(fetchSize);
        sqlp.setQueryTimeout(queryTimeout);
        sqlp.setContext(context);
    }

    /**
     * {@inheritDoc}
     *
     * @param sqlId 下記形式のSQL_ID
     * <br/>
     * SQLリソース名 + "#" + SQL_ID)
     * @see BasicSqlLoader
     */
    @Override
    public SqlPStatement getSqlPStatementBySqlId(String sqlId, Connection con, DbExecutionContext context) throws SQLException {
        String sql = getSql(sqlId);
        BasicSqlPStatement sqlp = (BasicSqlPStatement) getSqlPStatement(sql, con, context);
        sqlp.setAdditionalInfo("SQL_ID = [" + sqlId + "]");
        return sqlp;
    }


    /**
     * ParameterizedSqlPStatementを生成し返却する。
     *
     * @param sql SQL文
     * @param con Connectionオブジェクト
     * @param context DBアクセス時の実行時のコンテキスト
     * @return SQL文を元に生成したStatementオブジェクト
     * @throws SQLException SQL文が不正な場合、データベースアクセスエラーが発生した場合
     */
    @Override
    public ParameterizedSqlPStatement getParameterizedSqlPStatement(final String sql,
            final Connection con, DbExecutionContext context) throws SQLException {
        BasicSqlPStatement sqlp = createParameterizedSqlPStatement(sql, con, context);
        // 追加情報にオリジナルのSQLを設定する。
        sqlp.setAdditionalInfo("original sql = [" + sql + "]");
        return sqlp;
    }

    /**
     * ParameterizedSqlPStatementを生成し返却する。
     *
     * @param sql SQL文
     * @param con Connectionオブジェクト
     * @param context DBアクセス時の実行時のコンテキスト
     * @param selectOption 検索処理条件
     * @return SQL文を元に生成したStatementオブジェクト
     * @throws SQLException SQL文が不正な場合、データベースアクセスエラーが発生した場合
     */
    @Override
    public ParameterizedSqlPStatement getParameterizedSqlPStatement(final String sql,
            final Connection con, DbExecutionContext context, SelectOption selectOption) throws SQLException {
        BasicSqlPStatement sqlp = createParameterizedSqlPStatement(sql, con, context, selectOption);
        // 追加情報にオリジナルのSQLを設定する。
        sqlp.setAdditionalInfo("original sql = [" + sql + "]");
        return sqlp;
    }

    /**
     * {@inheritDoc}
     *
     * @param sqlId 下記形式のSQL_ID
     * <br/>
     * SQLリソース名 + "#" + SQL_ID)
     */
    @Override
    public ParameterizedSqlPStatement getParameterizedSqlPStatementBySqlId(String sqlId,
            Connection con, DbExecutionContext context) throws SQLException {
        String sql = getSql(sqlId);
        BasicSqlPStatement sqlp = createParameterizedSqlPStatement(sql, con, context);
        // 追加情報にSQLIDとオリジナルのSQLを設定する。
        String additional = buildAdditionalInfoForSqlID(sqlId, sql);
        sqlp.setAdditionalInfo(additional);
        return sqlp;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ParameterizedSqlPStatement getParameterizedSqlPStatementBySqlId(String sql, String sqlId,
            Connection con, DbExecutionContext context) throws SQLException {
        BasicSqlPStatement sqlp = createParameterizedSqlPStatement(sql, con, context);
        // 追加情報にSQLIDとオリジナルのSQLを設定する。
        String additional = buildAdditionalInfoForSqlID(sqlId, sql);
        sqlp.setAdditionalInfo(additional);
        return sqlp;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ParameterizedSqlPStatement getParameterizedSqlPStatementBySqlId(String sql, String sqlId,
            Connection con, DbExecutionContext context, SelectOption selectOption) throws SQLException {
        BasicSqlPStatement sqlp = createParameterizedSqlPStatement(sql, con, context, selectOption);
        // 追加情報にSQLIDとオリジナルのSQLを設定する。
        String additional = buildAdditionalInfoForSqlID(sqlId, sql);
        sqlp.setAdditionalInfo(additional);
        return sqlp;
    }


    /**
     * 付加情報文字列を組み立てる。
     * この情報は、ログ出力に使用されることを想定している。
     *
     * @param sqlId SQL ID
     * @param sql SQL文
     * @return 付加情報
     * @see BasicSqlPStatement#setAdditionalInfo(String)
     */
    protected final String buildAdditionalInfoForSqlID(String sqlId, String sql) {
        return "SQL_ID = [" + sqlId + "]" + Logger.LS
                + "\toriginal sql = [" + sql + "]";
    }

    /**
     * ParameterizedSqlPStatement用のBasicSqlPStatementを生成する。
     *
     * @param sql SQL文
     * @param con データベース接続
     * @param context DBアクセス時の実行時のコンテキスト
     * @param selectOption 検索条件オプション
     * @return 生成したBasicSqlPStatementを生成する
     * @throws SQLException データベースアクセス例外発生時
     */
    private BasicSqlPStatement createParameterizedSqlPStatement(String sql,
            Connection con, DbExecutionContext context, SelectOption selectOption) throws SQLException {
        // 名前付きバインド変数の置き換え
        SqlParameterParser parser = createParser();
        parser.parse(sql);
        String parsedSql = parser.getSql();
        BasicSqlPStatement sqlp = new BasicSqlPStatement(parsedSql,
                                                         con.prepareStatement(parsedSql),
                                                         parser.getNameList());
        setCommonPropsTo(sqlp, context); // 共通設定
        setObjectFieldPropsTo(sqlp);   // オブジェクトのフィールドの値を扱う場合の設定
        setLikeConditionPropsTo(sqlp); // like条件用の設定
        sqlp.setSelectOption(selectOption);
        return sqlp;
    }

    /**
     * ParameterizedSqlPStatement用のBasicSqlPStatementを生成する。
     *
     * @param sql SQL文
     * @param con データベース接続
     * @param context DBアクセス時の実行時のコンテキスト
     * @return 生成したBasicSqlPStatementを生成する
     * @throws SQLException データベースアクセス例外発生時
     */
    private BasicSqlPStatement createParameterizedSqlPStatement(String sql,
            Connection con, DbExecutionContext context) throws SQLException {
        return createParameterizedSqlPStatement(sql, con, context, null);
    }

    /**
     * 指定された{@link BasicSqlPStatement}に対して、
     * LIKE条件必要なプロパティを設定する。
     *
     * @param sqlp 設定対象となるインスタンス
     */
    protected final void setLikeConditionPropsTo(BasicSqlPStatement sqlp) {
        sqlp.setLikeEscapeChar(likeEscapeChar);
        sqlp.setLikeEscapeTargetCharList(likeEscapeTargetCharList);
    }

    /**
     * 指定された{@link BasicSqlPStatement}に対して、
     * オブジェクトのフィールドの値を扱う場合に必要なプロパティを設定する。
     *
     * @param sqlp 設定対象となるインスタンス
     */
    protected final void setObjectFieldPropsTo(BasicSqlPStatement sqlp) {
        // オブジェクトのフィールドの値を扱う場合の設定
        sqlp.setUpdatePreHookObjectHandlerList(updatePreHookObjectHandlerList);
    }


    /**
     * {@link SqlParameterParser}インスタンスを生成する。
     *
     * @return {@link SqlParameterParser}インスタンス
     */
    protected final SqlParameterParser createParser() {
        SqlParameterParser parser = sqlParameterParserFactory.createSqlParameterParser();
        parser.setLikeEscapeChar(likeEscapeChar);
        return parser;
    }

    /** {@inheritDoc} */
    public String getVariableConditionSql(String sql, Object condition) {
        if (condition == null) {
            return sql;
        }
        SqlParameterParser parser = createParser();
        return parser.convertToJdbcSql(sql, condition);
    }

    /**
     * {@inheritDoc}
     *
     * @param sqlId 下記形式のSQL_ID
     * <br/>
     * SQLリソース名 + "#" + SQL_ID)
     */
    public String getVariableConditionSqlBySqlId(String sqlId, Object condition) {
        String sql = getSql(sqlId);
        return getVariableConditionSql(sql, condition);
    }

    @Override
    public SqlCStatement getSqlCStatement(final String sql, final Connection con, DbExecutionContext context) throws SQLException {
        final CallableStatement statement = con.prepareCall(sql);
        final BasicSqlCStatement sqlCStatement = new BasicSqlCStatement(sql, statement);
        setCommonPropsTo(sqlCStatement, context);
        return sqlCStatement;
    }

    @Override
    public SqlCStatement getSqlCStatementBySqlId(String sqlId, Connection con, DbExecutionContext context) throws SQLException {
        final BasicSqlCStatement statement = (BasicSqlCStatement) getSqlCStatement(getSql(sqlId), con, context);
        statement.setAdditionalInfo("SQL_ID = [" + sqlId + ']');
        return statement;
    }

    /**
     * SqlStatementExceptionFactoryを設定する。
     *
     * @param sqlStatementExceptionFactory SqlStatementExceptionFactory
     */
    public void setSqlStatementExceptionFactory(
            SqlStatementExceptionFactory sqlStatementExceptionFactory) {
        this.sqlStatementExceptionFactory = sqlStatementExceptionFactory;
    }

    /**
     * フェッチサイズを設定する。
     *
     * @param fetchSize フェッチサイズ
     */
    public void setFetchSize(String fetchSize) {
        this.fetchSize = Integer.parseInt(fetchSize);
    }

    /**
     * デフォルトのクエリータイムアウト時間（単位：秒）を設定する。
     *
     * @param queryTimeout デフォルトのクエリータイムアウト時間（単位：秒）
     * @see java.sql.Statement#setQueryTimeout(int)
     */
    public void setQueryTimeout(int queryTimeout) {
        this.queryTimeout = queryTimeout;
    }

    /**
     * オブジェクトのフィールドへの値自動設定用ハンドラーを設定する。<br>
     * オブジェクトのフィールドの値をバインド変数に設定する事前処理として、
     * このハンドラーを使用してフィールドに値の自動設定を行う。
     *
     * @param updatePreHookObjectHandlerList オブジェクトハンドラー
     */
    public void setUpdatePreHookObjectHandlerList(
            List<AutoPropertyHandler> updatePreHookObjectHandlerList) {
        this.updatePreHookObjectHandlerList = updatePreHookObjectHandlerList;
    }

    /**
     * 名前付きバインド変数をもつSQLの解析クラスを設定する。
     *
     * @param sqlParameterParserFactory 名前付きバインド変数SQLの解析クラス
     */
    public void setSqlParameterParserFactory(SqlParameterParserFactory sqlParameterParserFactory) {
        this.sqlParameterParserFactory = sqlParameterParserFactory;
    }

    /**
     * like条件のエスケープ対象の文字リスト(カンマ区切りの文字列)を設定する。<br>
     *
     * @param likeEscapeTargetCharList エスケープ文字のリスト(カンマ区切り)
     */
    public void setLikeEscapeTargetCharList(String likeEscapeTargetCharList) {
        String[] strings = likeEscapeTargetCharList.split(",");
        this.likeEscapeTargetCharList = new char[strings.length];
        for (int i = 0; i < strings.length; i++) {
            String string = strings[i];
            if (string.length() != 1) {
                throw new IllegalArgumentException(String.format("invalid escape char. char = [%s]",
                        string));
            }
            this.likeEscapeTargetCharList[i] = string.charAt(0);
        }
    }

    /**
     * like条件のエスケープ文字を設定する。<br>
     *
     * @param likeEscapeChar エスケープ文字
     */
    public void setLikeEscapeChar(String likeEscapeChar) {
        this.likeEscapeChar = likeEscapeChar.charAt(0);
    }

    /**
     * SQL文をロードするクラスを設定する。
     * @param sqlLoader SQL文をロードするクラス
     */
    public void setSqlLoader(StaticDataLoader<Map<String, String>> sqlLoader) {
        cachingSqlLoader.setSqlLoader(sqlLoader);
    }

    /**
     * 指定されたSQLリソースに対応するSQL文を取得する。
     *
     * @param sqlResource SQLリソース(SQLリソース名 + "#" + SQL_ID)
     * @return SQL文
     */
    protected String getSql(String sqlResource) {
        return cachingSqlLoader.getSql(sqlResource);
    }

    /**
     * フィールド情報保持インスタンスを設定する。
     *
     * <p><b>フィールドではなくプロパティアクセスするよう仕様変更を行ったため本プロパティは廃止しました。(値を設定しても意味がありません)</b>
     *
     * @param objectFieldCache オブジェクトのフィールド情報保持インスタンス
     */
    @IgnoreProperty("フィールドではなくプロパティアクセスするよう仕様変更を行ったため本プロパティは廃止しました。(値を設定しても意味がありません)")
    public void setObjectFieldCache(
            StaticDataCache<Map<String, Map<String, Object>>> objectFieldCache) {
    }
}

